<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2018-07-17 Tue 16:22 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>&lrm;</title>
<meta name="generator" content="Org mode" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2018 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org9f2a9e3">1. installing arch dot txt</a></li>
<li><a href="#orgd627627">2. why you should or should not install arch</a></li>
<li><a href="#orgec301bd">3. disclaimer (sacrifices, incantations, don't sue me, etc.)</a></li>
<li><a href="#org2922e68">4. live usb</a></li>
<li><a href="#org772a3b3">5. setting up to install</a>
<ul>
<li><a href="#org75ca04f">5.1. configure our mirrors to download software from</a></li>
<li><a href="#org6ae0c92">5.2. configure wifi ("optional")</a></li>
<li><a href="#org8cd1c70">5.3. debugging advise:</a></li>
</ul>
</li>
<li><a href="#orgff37544">6. freeze: partition time!</a>
<ul>
<li><a href="#orgf72848f">6.1. make sure we have (U)EFI</a></li>
<li><a href="#orga5ed206">6.2. figure out where our main drive is</a></li>
<li><a href="#orga3793c1">6.3. partitioning and configuring</a></li>
</ul>
</li>
<li><a href="#orge257b92">7. encryption and mounting</a>
<ul>
<li><a href="#orgf7266b1">7.1. encryption with <code>cryptsetup</code></a></li>
<li><a href="#org328a902">7.2. generation of logical volumes within our LVM</a></li>
<li><a href="#orgc3fb023">7.3. format and mount our logical partitions</a></li>
</ul>
</li>
<li><a href="#org9e2f488">8. installing arch and setting it up to boot and run</a>
<ul>
<li><a href="#orgfaea243">8.1. install arch onto <code>/mnt</code></a></li>
<li><a href="#orgce1843f">8.2. generate our fstab file</a></li>
<li><a href="#org78f9209">8.3. log into arch and installing stuff!</a></li>
<li><a href="#org5db9afc">8.4. modify <code>/etc/mkinitcpio.conf</code> to enable encryption</a></li>
<li><a href="#orgbe7ca43">8.5. setting up the bootloader itself</a></li>
<li><a href="#org8796651">8.6. reboot and start arch</a></li>
</ul>
</li>
<li><a href="#org438a313">9. drivers, wifi, sudo user</a>
<ul>
<li><a href="#orgd63e5f4">9.1. utilities</a></li>
<li><a href="#orgd50cf54">9.2. touchpad, xorg, and graphics drivers</a></li>
<li><a href="#org364fa82">9.3. configuring sudo, adding a user, disabling root</a></li>
</ul>
</li>
<li><a href="#orgd16fe63">10. loose ends: desktop stuff, etc</a>
<ul>
<li><a href="#org15c5752">10.1. desktop environment</a>
<ul>
<li><a href="#org87ec7d6">10.1.1. kde discover</a></li>
</ul>
</li>
<li><a href="#org16f2368">10.2. fonts</a></li>
<li><a href="#orgd6e6405">10.3. emacs</a></li>
<li><a href="#org19b4a30">10.4. gpg and ssh</a></li>
<li><a href="#org807a2b2">10.5. AUR and aurman</a></li>
</ul>
</li>
<li><a href="#org2e3cd98">11. other tweaks and lenovo x1c6 stuff</a>
<ul>
<li><a href="#org9a67433">11.1. cpu throttling</a></li>
<li><a href="#org657aeba">11.2. bios update</a></li>
<li><a href="#orge10fa2b">11.3. trimming SSD</a></li>
<li><a href="#org6f5bc6e">11.4. hibernate support</a></li>
<li><a href="#org038019c">11.5. patching for S3 support</a></li>
</ul>
</li>
</ul>
</div>
</div>
<div id="outline-container-org9f2a9e3" class="outline-2">
<h2 id="org9f2a9e3"><span class="section-number-2">1</span> installing arch dot txt</h2>
<div class="outline-text-2" id="text-1">
<p>
i am so sorry for this guide.
</p>


<div class="figure">
<p><img src="https://raw.githubusercontent.com/ejmg/an-idiots-guide-to-installing-arch-on-a-lenovo-carbon-x1-gen-6/master/dumb-pic-2.jpeg" alt="dumb-pic-2.jpeg" />
</p>
</div>

<p>
this is an attempt at a comprehensive, start to finish, install guide for
lenovo's 6th gen carbon x1. my model is the 20KG-0022US, which I bought from
costco, and comes with an 8th gen intel i7, 16gb ram, and 512gb ssd. My
instructions will thus have mentions of specific components from this
laptops as they appear in the guide, but i will try to make it clear when
such a case may not hold for others with respect to 6th gen x1 versions.
</p>

<p>
i want to make a shoutout to specific sources for informing this guide. it's
the result of mashing together and cross referencing the wiki with multiple
guides where I would verify instructions and install strategies. Included in
this list is <a href="https://www.youtube.com/channel/UCxQKHvKbmSzGMvUrVtJYnUA">LearnLinux.tv</a>, <a href="https://www.youtube.com/channel/UCNgMPxqWds9IYR_QFNPButw">Kai Hendry</a>, <a href="https://www.youtube.com/channel/UCNgMPxqWds9IYR_QFNPButw">Lucas Alvares Gomes</a>, <a href="https://ticki.github.io/blog/setting-up-archlinux-on-a-lenovo-yoga/">Ticki</a>, <a href="https://kozikow.com/2016/06/03/installing-and-configuring-arch-linux-on-thinkpad-x1-carbon/#Disable-secure-boot">Robert
Kozikowski</a>, and <a href="https://delta-xi.net">Erik Sonnleitner</a>. ya'll helped a homie get arch working on
this kickass computer.
</p>
</div>
</div>

<div id="outline-container-orgd627627" class="outline-2">
<h2 id="orgd627627"><span class="section-number-2">2</span> why you should or should not install arch</h2>
<div class="outline-text-2" id="text-2">
<ol class="org-ol">
<li>Pros
<ul class="org-ul">
<li>you can learn a small bit about how linux and operating systems work</li>
<li>very up to date software</li>
<li>access to things like AUR</li>
<li>run a very lightweight system that, outside of even more niche and
esoteric operating systems, avoids bloat and waste</li>
<li>want something extremely sad and nerdy to """brag about""" (don't do this)</li>
</ul></li>
<li>Cons
<ul class="org-ul">
<li>my friend Chris Allen made a <a href="https://github.com/ejmg/an-idiots-guide-to-installing-arch-on-a-lenovo-carbon-x1-gen-6/pull/3">PR wiping the entire fucking guide</a> and
simply suggesting you Don't Install Arch
<ul class="org-ul">
<li>the man has a <i>solid</i> point</li>
</ul></li>
<li>it can take a lot of time to get going
<ul class="org-ul">
<li>this is assuming your hardware (non X1C6) is well supported or
doesn't have some proprietary code that throws you into kernel h e l l</li>
<li>you could equally do something better with your time, like sleep,
call your mom, or, idk, hangout with friends if you have those.</li>
<li>not proud of this, but it took me like 8 hours to get it all right
for the first time. i'm an idiot, though. ergo, <i>idiot's guide</i></li>
</ul></li>
<li>it has the most up to date packages, which translates to instability
and things breaking more often
<ul class="org-ul">
<li>if you do software, this is actually something you often don't want
outside of maybe what you work on the most.</li>
</ul></li>
<li>ricing
<ul class="org-ul">
<li>this is just the time point again</li>
<li>but really, what good does it serve you to be constantly tweaking your
configurations and init files and thus constantly having to fix them</li>
<li>arch doesn't actually require that, but it is so tempting to do and
thus a danger</li>
</ul></li>
</ul></li>
</ol>
</div>
</div>

<div id="outline-container-orgec301bd" class="outline-2">
<h2 id="orgec301bd"><span class="section-number-2">3</span> disclaimer (sacrifices, incantations, don't sue me, etc.)</h2>
<div class="outline-text-2" id="text-3">
<p>
since we are installing arch, there a a few precautions you'll want to
take/keep in mind:
</p>
<ol class="org-ol">
<li>if your shit gets destroyed, it is 1000% not my problem and not my fault
lmao
<ul class="org-ul">
<li>that said, that's an extremely unlikely outcome, please don't let this
liability bulletpoint scare you</li>
</ul></li>
<li><p>
you may want to form a pentagram with some usb cords, placing a copy of
the GNU GPLv3 license at its center, and playing some soft but slightly
erotic ambient music so that we may pray to stallman that this goes
smoothly
</p>

<p>
<a href="https://raw.githubusercontent.com/ejmg/an-idiots-guide-to-installing-arch-on-a-lenovo-carbon-x1-gen-6/master/stallman-dot-png.jpg">st. ignucius, may he guide us</a>
</p></li>

<li>put aside like 2-4 hours for this depending on how inexperienced you are
<ul class="org-ul">
<li>just keep this in mind and or be somewhere you can stop and leave your laptop
plugged in on the chance you need to do something else</li>
</ul></li>
</ol>
</div>
</div>
<div id="outline-container-org2922e68" class="outline-2">
<h2 id="org2922e68"><span class="section-number-2">4</span> live usb</h2>
<div class="outline-text-2" id="text-4">
<ol class="org-ol">
<li>download the img from <a href="https://www.archlinux.org/download/">https://www.archlinux.org/download/</a>
<ul class="org-ul">
<li>torrent is faster, also remember to seed</li>
<li>alternatively just dl the iso directly, slightly slower</li>
</ul></li>
<li>install
<ul class="org-ul">
<li><p>
find your usb
</p>
<div class="org-src-container">
<pre class="src src-sh">lsblk
</pre>
</div>
<ul class="org-ul">
<li>it will probably be named <code>sda</code> or <code>sdb</code>, pay attention to the size
of the drives upon output to be sure.</li>
<li>you are going to use the name of the drive itself, <code>sdx</code>, so <b>do not</b> include
a number, such as <code>sdx1</code> in the drive name for the command below</li>
<li><p>
make sure it is unmounted with:
</p>
<pre class="example">
umount /dev/sdx # x = letter of your actual drive
</pre></li>
</ul></li>
<li><p>
in term:
</p>
<div class="org-src-container">
<pre class="src src-sh">dd <span style="color: #f8f8f2;">bs</span>=4M <span style="color: #f8f8f2;">if</span>=/path/to/iso <span style="color: #f8f8f2;">of</span>=/path/to/usb <span style="color: #f8f8f2;">status</span>=progress <span style="color: #f8f8f2;">oflag</span>=sync
</pre>
</div></li>
<li><p>
example in my case:
</p>
<div class="org-src-container">
<pre class="src src-sh">dd <span style="color: #f8f8f2;">bs</span>=4M <span style="color: #f8f8f2;">if</span>=~/Downloads/archlinux-2018.07.01-x86_64.iso <span style="color: #f8f8f2;">of</span>=/dev/sda <span style="color: #f8f8f2;">status</span>=progress <span style="color: #f8f8f2;">oflag</span>=sync
</pre>
</div>
<ul class="org-ul">
<li><b>note</b>: I did this on Ubuntu with Gnome, and it proved not possible
to format it with the drive entirely unmounted because of how
Nautillus handles mounting jump drives. Therefore, I actually did
this with it mounted but had no problems so ¯\<sub>(ツ)</sub>_/¯
linux ¯\<sub>(ツ)</sub>_/¯ ymmv ¯\<sub>(ツ)</sub>_/¯</li>
</ul></li>
<li>upon finishing, insert the usb into the x1</li>
</ul></li>
<li>disable safe boot
<ul class="org-ul">
<li>turn on laptop (or hard reset to ensure true "turn off"), press enter
at lenovo boot screen</li>
<li>under Security, you will find the option. Disable it.</li>
</ul></li>
<li>(optional) enable Thunerbolt BIOS Assist Mode
<ul class="org-ul">
<li>this effects the process of enabling S3, which is something at the very
end of this guide
<ul class="org-ul">
<li>if you are going to do that, it saves you a reboot (and it doesn't
effect you really either way)</li>
</ul></li>
<li>You will find the option under Config</li>
</ul></li>
<li>ensure your usb is first in boot order
<ul class="org-ul">
<li>under Startup, go to boot</li>
<li>using the <code>-</code> and <code>+</code> keys, make sure it is at the top of the list
<ul class="org-ul">
<li>I had to use <code>Shift</code> while pressing <code>+</code> for it to affect</li>
</ul></li>
<li>press <code>F10</code> to save our configs and exit.</li>
</ul></li>
</ol>

<p>
If everything went well, we will now boot into the arch iso. 
</p>
</div>
</div>

<div id="outline-container-org772a3b3" class="outline-2">
<h2 id="org772a3b3"><span class="section-number-2">5</span> setting up to install</h2>
<div class="outline-text-2" id="text-5">
<p>
you are going to need to be familiar with vim, nano, pico, emacs, idc,
something, this is on you, fam.
</p>
</div>

<div id="outline-container-org75ca04f" class="outline-3">
<h3 id="org75ca04f"><span class="section-number-3">5.1</span> configure our mirrors to download software from</h3>
<div class="outline-text-3" id="text-5-1">
<ul class="org-ul">
<li>this is the difference between a 20kb/s and ~10mb/s download speed, at
least in my case first time round</li>
<li>the mirror list is found in <code>/etc/pacman.d/mirrorlist</code>
<ul class="org-ul">
<li>the logic is simple: the earlier a mirror item appears in the list,
the greater preference it is given for use as a source.</li>
</ul></li>
<li>copy and paste a server that is close to you geographically and insert
it at the top of the list.
<ul class="org-ul">
<li><p>
server i chose for those in USA who are lazy:
</p>
<div class="org-src-container">
<pre class="src src-sh">Server = http://mirrors.lug.mtu.edu/archlinux/$<span style="color: #f8f8f2;">repo</span>/os/$<span style="color: #f8f8f2;">arch</span>
</pre>
</div></li>
</ul></li>
<li><p>
<b>important</b> refresh our mirrorlist
</p>
<div class="org-src-container">
<pre class="src src-sh">pacman -Sy
</pre>
</div>
<ul class="org-ul">
<li>we will now have (hopefully) fast downloads for our packages</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-org6ae0c92" class="outline-3">
<h3 id="org6ae0c92"><span class="section-number-3">5.2</span> configure wifi ("optional")</h3>
<div class="outline-text-3" id="text-5-2">
<ol class="org-ol">
<li>x1 does not have a ether port, but adaptors exist
<ul class="org-ul">
<li>these adaptors supposedly work without issue but I don't have one,
so I'm assuming you don't either</li>
<li>dilemma: we don't have fucking internet by default</li>
<li>solution: <code>netctl</code></li>
</ul></li>
<li>find the name of your wifi card device
<ul class="org-ul">
<li><p>
I would assume x1's have the same name, but who knows:
</p>
<div class="org-src-container">
<pre class="src src-sh">ip link
</pre>
</div></li>
<li>mine was <code>wlp2s0</code>, arch wiki suggests that anything that starts with
a <code>w</code> is probably the wifi card</li>
</ul></li>
<li>figure out the wifi point you are going to use.
<ul class="org-ul">
<li>I'm going to assume it is either of "simple" wpa or wpa-enterprise
<ul class="org-ul">
<li>the latter is at corporate or university settings if that helps</li>
<li><p>
luckily <code>netctl</code> provides templates for both. copy the appropriate
one and place it in the root of <code>netctl</code> as so:
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #6272a4;"># </span><span style="color: #6272a4;">simple wpa, such as home routers</span>&#57344;&#57345;&#57345;
cp /etc/netctl/examples/wireless-wpa /etc/netctl/&lt;NAME-YOU-WANT-TO-GIVE-IT&gt;&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
<span style="color: #6272a4;"># </span><span style="color: #6272a4;">enterprise wpa</span>&#57344;&#57345;&#57345;
cp /etc/netctl/examples/wireless-wpa-configsection /etc/netctl/&lt;NAME-YOU-WANT-TO-GIVE-IT&gt;
</pre>
</div></li>
<li><p>
<code>wireless-wpa</code> looks like this:
</p>
<div class="org-src-container">
<pre class="src src-conf"><span style="color: #f8f8f2;">Description</span>=<span style="color: #f1fa8c;">'A simple WPA encrypted wireless connection'</span>
<span style="color: #f8f8f2;">Interface</span>=wlan0
<span style="color: #f8f8f2;">Connection</span>=wireless

<span style="color: #f8f8f2;">Security</span>=wpa
<span style="color: #f8f8f2;">IP</span>=dhcp

<span style="color: #f8f8f2;">ESSID</span>=<span style="color: #f1fa8c;">'MyNetwork'</span>
<span style="color: #6272a4;"># </span><span style="color: #6272a4;">Prepend hexadecimal keys with \"</span>
<span style="color: #6272a4;"># </span><span style="color: #6272a4;">If your key starts with ", write it as '""&lt;key&gt;"'</span>
<span style="color: #6272a4;"># </span><span style="color: #6272a4;">See also: the section on special quoting rules in netctl.profile(5)</span>
<span style="color: #f8f8f2;">Key</span>=<span style="color: #f1fa8c;">'WirelessKey'</span>
<span style="color: #6272a4;"># </span><span style="color: #6272a4;">Uncomment this if your ssid is hidden</span>
<span style="color: #6272a4;">#</span><span style="color: #6272a4;">Hidden=yes</span>
<span style="color: #6272a4;"># </span><span style="color: #6272a4;">Set a priority for automatic profile selection</span>
<span style="color: #6272a4;">#</span><span style="color: #6272a4;">Priority=10</span>
</pre>
</div></li>
<li><p>
<code>wireless-wpa-configsection</code> looks like this:
</p>
<div class="org-src-container">
<pre class="src src-conf"><span style="color: #f8f8f2;">Description</span>=<span style="color: #f1fa8c;">'A wireless connection using a custom network block configuration'</span>
<span style="color: #f8f8f2;">Interface</span>=wlan0
<span style="color: #f8f8f2;">Connection</span>=wireless
<span style="color: #f8f8f2;">Security</span>=wpa-configsection
<span style="color: #f8f8f2;">IP</span>=dhcp
<span style="color: #f8f8f2;">WPAConfigSection</span>=(
    <span style="color: #f1fa8c;">'ssid="University"'</span>
    <span style="color: #f1fa8c;">'key_mgmt=WPA-EAP'</span>
    <span style="color: #f1fa8c;">'eap=TTLS'</span>
    <span style="color: #f1fa8c;">'group=TKIP'</span>
    <span style="color: #f1fa8c;">'pairwise=TKIP CCMP'</span>
    <span style="color: #f1fa8c;">'anonymous_identity="anonymous"'</span>
    <span style="color: #f1fa8c;">'identity="myusername"'</span>
    <span style="color: #f1fa8c;">'password="mypassword"'</span>
    <span style="color: #f1fa8c;">'priority=1'</span>
    <span style="color: #f1fa8c;">'phase2="auth=PAP"'</span>
)
</pre>
</div></li>
<li><b>in both cases</b>:
<ul class="org-ul">
<li><code>Interface</code> takes the value of the wifi card device name we
found earlier</li>
<li><code>Security</code>, <code>Connection</code>, and <code>IP</code> remain untouched</li>
<li>Do what you will with <code>Description</code></li>
</ul></li>
<li>For vanilla <code>wireless-wpa</code>, the config explains itself:
<ul class="org-ul">
<li><code>ESSID</code> is the name of your wifi access point</li>
<li><code>Key</code> is the password</li>
</ul></li>
<li>For <code>wireless-wpa-configsection</code>, things can be trickier:
<ul class="org-ul">
<li><code>ssid</code> is access point</li>
<li><code>key_mgmt</code> should remain untouched in most cases</li>
<li><code>eap</code> is entirely dependent on your case, for many (aka
including me), it is <code>PEAP</code></li>
<li><code>pairwise</code> is dependent on your situation (i did not need it)</li>
<li><code>anonymous_identity</code> is dependent on your situation (i did not need it)</li>
<li><code>password</code> is password</li>
<li><code>priority</code> is dependent on your situation (i did not need it)</li>
<li><code>phase2</code> is dependent on your situation (i did not need it)</li>
<li>if my list appears not very useful in terms of help and
explanation, then you understand the very nature of who is
writing it and i'm so sorry i'm trying</li>
<li><p>
example <code>wireless-wpa-configsection</code> i actually used (with
values obviously substituted in):
</p>
<div class="org-src-container">
<pre class="src src-conf"><span style="color: #f8f8f2;">Description</span>=<span style="color: #f1fa8c;">'lol'</span>
<span style="color: #f8f8f2;">Interface</span>=wlp2s0
<span style="color: #f8f8f2;">Connection</span>=wireless
<span style="color: #f8f8f2;">Security</span>=wpa-configsection
<span style="color: #f8f8f2;">IP</span>=dhcp
<span style="color: #f8f8f2;">WPAConfigSection</span>=(
    <span style="color: #f1fa8c;">'ssid="wutang"'</span>
    <span style="color: #f1fa8c;">'key_mgmt=WPA-EAP'</span>
    <span style="color: #f1fa8c;">'eap=PEAP'</span>
    <span style="color: #f1fa8c;">'identity="ghostfacekillah"'</span>
    <span style="color: #f1fa8c;">'password="suuuuuuuuuuuuu69"'</span>
)
</pre>
</div></li>
</ul></li>
</ul></li>
</ul></li>
<li><p>
save your config file, time to connect:
</p>
<div class="org-src-container">
<pre class="src src-sh">netctl start &lt;NAME-OF-YOUR-WIFI-PROFILE&gt;
</pre>
</div>
<ul class="org-ul">
<li>it should take like 3 seconds to connect</li>
<li>if nothing happens, it worked</li>
<li>check with a quick <code>ping 8.8.8.8</code>, if packets are shooting out, you
got internet.
<ul class="org-ul">
<li>otherwise, diagnose with <code>journalctl -xe</code> and use those arch wikis
and forums! welcome to arch :) :) :) :)</li>
</ul></li>
</ul></li>
</ol>
</div>
</div>
<div id="outline-container-org8cd1c70" class="outline-3">
<h3 id="org8cd1c70"><span class="section-number-3">5.3</span> debugging advise:</h3>
<div class="outline-text-3" id="text-5-3">
<ul class="org-ul">
<li>i did not run into this during install time, but when i later
tried to connect to wifi, a few different commands came in handy
to debug my situation:
<ol class="org-ol">
<li>stop previous connection
<ul class="org-ul">
<li><p>
can't have more than one <code>netctl</code> service going, so:
</p>
<div class="org-src-container">
<pre class="src src-sh">netctl stop &lt;PROFILE&gt;
</pre>
</div></li>
</ul></li>

<li>systemctl fuckery
<ul class="org-ul">
<li><p>
systemctl sometimes gets in the way with its service/handling
of netctl, stop it
</p>
<div class="org-src-container">
<pre class="src src-sh">systemctl stop netctl@&lt;PROFILE&gt;.service
</pre>
</div></li>
</ul></li>

<li>ip link may have your services as <code>up</code>, put them as <code>down</code>
<ul class="org-ul">
<li><p>
<code>netctl</code> does not like it when your link is up before it runs,
so turn it off:
</p>
<div class="org-src-container">
<pre class="src src-sh">ip link set &lt;INTERFACE&gt; down
</pre>
</div></li>
</ul></li>
</ol></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgff37544" class="outline-2">
<h2 id="orgff37544"><span class="section-number-2">6</span> freeze: partition time!</h2>
<div class="outline-text-2" id="text-6">
<p>
that was a bad joke jesus christ forgive me 
</p>
</div>
<div id="outline-container-orgf72848f" class="outline-3">
<h3 id="orgf72848f"><span class="section-number-3">6.1</span> make sure we have (U)EFI</h3>
<div class="outline-text-3" id="text-6-1">
<ul class="org-ul">
<li>i am doing all of this on the <b>presumption we have EFI</b>, maybe
should have brought that up while we were in BIOS</li>
<li><p>
use the following command to ensure we are in EFI mode:
</p>
<div class="org-src-container">
<pre class="src src-sh">ls /sys/firmware/efi/
</pre>
</div>
<ul class="org-ul">
<li><b>if the directory exists, we are good</b></li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-orga5ed206" class="outline-3">
<h3 id="orga5ed206"><span class="section-number-3">6.2</span> figure out where our main drive is</h3>
<div class="outline-text-3" id="text-6-2">
<ul class="org-ul">
<li>find our drives with <code>lsblk</code> yet again
<ul class="org-ul">
<li>my x1 came with a PCIe ssd, yours may or may not and, more
importantly, this influences its name as seen with <code>lsblk</code> (i think)
<ul class="org-ul">
<li>for the PCIe ssd, it will be called something like <code>nvme0n1</code>, with
each partition appending a <code>p1</code>, <code>p2</code>, and so forth</li>
<li>for others, it may appear as the traditional <code>sda</code>, with a number
appended for each partition as it did above for your usb stick.</li>
<li>will assume we are using <code>nvme0n1</code> as our os drive hereon</li>
</ul></li>
<li>my x1 came with windows installed and i assumed yours did, too.
<ul class="org-ul">
<li>i am going to kill windows with this install.
<ul class="org-ul">
<li>cannot have an optimally secure setup otherwise (or rather, I'm
not going to put up with that much of a headache).</li>
</ul></li>
<li>if you want to keep a dual boot setup, this is not the guide for you.</li>
<li>i am sorry to fail you like this, my kings and queens. f.</li>
</ul></li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-orga3793c1" class="outline-3">
<h3 id="orga3793c1"><span class="section-number-3">6.3</span> partitioning and configuring</h3>
<div class="outline-text-3" id="text-6-3">
<ol class="org-ol">
<li><p>
we will now format our main drive with arch
</p>
<pre class="example">
gdisk /dev/nvme0n1
</pre>
<ul class="org-ul">
<li>you will enter a prompt of sorts for gdisk</li>
<li>you should get some output about a valid GPT partition found
alongside with a protected MBR partition. This is good.</li>
</ul></li>
<li>we will now wipe the disk.
<ul class="org-ul">
<li><b>this is permanent. stop now or forever hold your peace</b></li>
<li>I will be listing the commands in order and describe what they do
as subpoints:
<ul class="org-ul">
<li><code>o</code>
<ul class="org-ul">
<li>we are wiping the disk. answer <code>y</code> to continue.</li>
</ul></li>
<li><code>n</code>
<ul class="org-ul">
<li>command for making a new partition.</li>
</ul></li>
<li><code>Enter</code>
<ul class="org-ul">
<li>we want the default number for the partition, and this
convention will hold throughout the rest of the guide.</li>
</ul></li>
<li><code>Enter</code>
<ul class="org-ul">
<li>we don't want to specify the starting vector for the partition,
and this convention will hold throughout the rest of the
guide.</li>
</ul></li>
<li><code>+512MB</code>
<ul class="org-ul">
<li>we want our first partition to be of size 512MB. This is to
meet the specification for a EFI boot partition.</li>
</ul></li>
<li><code>EF00</code>
<ul class="org-ul">
<li>this is the hex code type to indicate we want the partition to
be of EFI</li>
<li><b>partition 1 done</b></li>
</ul></li>
<li><code>n</code>
<ul class="org-ul">
<li>making another partition</li>
</ul></li>
<li><code>Enter</code></li>
<li><code>Enter</code></li>
<li><code>Enter</code>
<ul class="org-ul">
<li>the final partition is going to take the rest of our disk. If
you do not want this, assign it something else like we did
above.</li>
</ul></li>
<li><code>8E00</code>
<ul class="org-ul">
<li>this is the linux LVM (logical volume manager) format, which we
are going to need for our encryption scheme.</li>
<li><b>second partition done</b></li>
<li>we are now done making <i>physical</i> partitions</li>
</ul></li>
<li><code>w</code>
<ul class="org-ul">
<li><b>we are going to write to disk</b></li>
</ul></li>
<li><code>y</code>
<ul class="org-ul">
<li><b>we just wrote to disk. goodbye everything else</b></li>
</ul></li>
</ul></li>
</ul></li>
</ol>
</div>
</div>
</div>
<div id="outline-container-orge257b92" class="outline-2">
<h2 id="orge257b92"><span class="section-number-2">7</span> encryption and mounting</h2>
<div class="outline-text-2" id="text-7">
</div>
<div id="outline-container-orgf7266b1" class="outline-3">
<h3 id="orgf7266b1"><span class="section-number-3">7.1</span> encryption with <code>cryptsetup</code></h3>
<div class="outline-text-3" id="text-7-1">
<ul class="org-ul">
<li>make sure to use our <b>second partition</b>
<ul class="org-ul">
<li><p>
<b>not</b> our EFI partition
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #6272a4;"># </span><span style="color: #6272a4;">in my case, this is...</span>&#57344;&#57345;&#57345;
cryptsetup luksFormat /dev/nvme0n1p2
</pre>
</div></li>
<li>you will be prompted for a password, make it a good one</li>
<li>we do not specify the luks type, such as <code>luks2</code>, because it is
incompatible with GRUB. We will not be using GRUB, but I do not
want to screw myself (or you) out of that option.
<ul class="org-ul">
<li>for the love of god, do not forget this password</li>
<li>this process could take like 2 or 3 or 4 hours depending on
your experience and the last thing you need to do is forget the
fucking luks password.</li>
</ul></li>
<li>what we have now is a Luks container, which we will be using to
put our actual OS/data in, which makes handling encryption logic
easier in the long run.</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-org328a902" class="outline-3">
<h3 id="org328a902"><span class="section-number-3">7.2</span> generation of logical volumes within our LVM</h3>
<div class="outline-text-3" id="text-7-2">
<ol class="org-ol">
<li>open our encrypted container:
<ul class="org-ul">
<li><p>
we need to name the container, I am choosing <code>main_part</code> for main
partition, it really doesn't matter
</p>
<div class="org-src-container">
<pre class="src src-sh">cryptsetup open --type luks /dev/nmve0n1p2 main_part
</pre>
</div></li>
<li>this should now be available at <code>/dev/mapper/main_part</code></li>
</ul></li>
<li><p>
create a physical volume within our LVM partition:
</p>
<div class="org-src-container">
<pre class="src src-sh">pvcreate /dev/mapper/main_part
</pre>
</div>
<ul class="org-ul">
<li>this creates a "physical" volume inside of our luks container</li>
</ul></li>
<li>create a volume group
<ul class="org-ul">
<li>we need to name this one, I'm choosing <code>main_group</code> to continue
the theme</li>
<li><p>
this will go on "top" of our physical container we just made, ergo
why we create our group from it.
</p>
<div class="org-src-container">
<pre class="src src-sh">vgcreate main_group /dev/mapper/main_part
</pre>
</div></li>
</ul></li>
<li><p>
generate our logical partitions within the luks container
</p>

<p>
I am following the wiki piece for piece here, and what you ultimately
make the size of your swap (if any), root, and home (if any) is
completely your call. The numbers I use are pulled from thin air and
because I have so much space to use with the ssd that came with my
x1.
</p>

<p>
Note that for each instance, we are taking our logical partition from
the volume group we just created. <b>Be conscious of this</b>.
</p>

<ol class="org-ol">
<li><p>
create swap:
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #6272a4;"># </span><span style="color: #6272a4;">8 gb for swap</span>&#57344;&#57345;&#57345;
lvcreate -L8G main_group -n swap
</pre>
</div></li>
<li><p>
create root
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #6272a4;"># </span><span style="color: #6272a4;">8 gb for swap</span>&#57344;&#57345;&#57345;
lvcreate -L64G main_group -n root
</pre>
</div></li>
<li><p>
create home
</p>
<div class="org-src-container">
<pre class="src src-sh">lvcreate -l 100%FREE main_group -n home
</pre>
</div>
<ul class="org-ul">
<li>we use a special trick to allocate all remaining memory in our
ssd to home. it goes without saying that do not do this if you
do not want to allocate all of it to home, etc.</li>
</ul></li>
</ol></li>
</ol>
</div>
</div>
<div id="outline-container-orgc3fb023" class="outline-3">
<h3 id="orgc3fb023"><span class="section-number-3">7.3</span> format and mount our logical partitions</h3>
<div class="outline-text-3" id="text-7-3">
<p>
Note that our resultant logical volumes are named
<code>&lt;VOLUME_GROUP_NAME&gt;-&lt;root|home|swap&gt;</code>, so my home is
<code>/dev/mapper/main_group-home</code> for example.
</p>

<ol class="org-ol">
<li><p>
root and home:
</p>
<div class="org-src-container">
<pre class="src src-sh">mkfs.ext4 /dev/mapper/main_group-root&#57344;&#57345;&#57345;
mkfs.ext4 /dev/mapper/main_group-home
</pre>
</div></li>

<li><p>
swap:
</p>
<pre class="example">
mkswap /dev/mapper/main_group-swap
</pre></li>

<li>mount our new volumes

<ol class="org-ol">
<li><p>
mount our new volumes
</p>

<p>
The logic here is that <code>/mnt/</code> translates to <code>/</code> for our actual
arch system once we install arch, so keep this in
mind. <code>/mnt/boot</code> becomes <code>/boot/</code>, <code>/mnt/home/</code> becomes home,
etcetera. 
</p>
<div class="org-src-container">
<pre class="src src-sh">mount /dev/mapper/main_group-root /mnt/&#57344;&#57345;&#57345;
mkdir /mnt/home&#57344;&#57345;&#57345;
mount /dev/mapper/main_group-home /mnt/home&#57344;&#57345;&#57345;
swapon /dev/mapper/main_group-swap
</pre>
</div></li>

<li><p>
mount our bootloader
</p>

<p>
Remember the first partition we made (<code>nvme0n1p1</code> in my case)? We
now need to mount it as the boot loader:
</p>
<div class="org-src-container">
<pre class="src src-sh">mkdir /mnt/boot/&#57344;&#57345;&#57345;
mount /dev/nvme0n1p1 /mnt/boot
</pre>
</div></li>
</ol></li>
</ol>
</div>
</div>
</div>
<div id="outline-container-org9e2f488" class="outline-2">
<h2 id="org9e2f488"><span class="section-number-2">8</span> installing arch and setting it up to boot and run</h2>
<div class="outline-text-2" id="text-8">
</div>
<div id="outline-container-orgfaea243" class="outline-3">
<h3 id="orgfaea243"><span class="section-number-3">8.1</span> install arch onto <code>/mnt</code></h3>
<div class="outline-text-3" id="text-8-1">
<div class="org-src-container">
<pre class="src src-sh">pacstrap /mnt/ base   
</pre>
</div>
<ul class="org-ul">
<li>note, a popular additional option to include is <code>base-devel</code>, so
install that as well if you see yourself needing to compile and link
a lot of things, such as through AUR.</li>
<li><b>CONGRATS!</b>
<ul class="org-ul">
<li>you have installed arch!</li>
</ul></li>
<li><b>CONGRATS!</b>
<ul class="org-ul">
<li>you are not even remotely close to done installing arch!</li>
<li>it won't even boot correctly as of now!</li>
<li>welcome to arch :~)</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-orgce1843f" class="outline-3">
<h3 id="orgce1843f"><span class="section-number-3">8.2</span> generate our fstab file</h3>
<div class="outline-text-3" id="text-8-2">
<ul class="org-ul">
<li><p>
this is important for boot loading purposes, not the last time you will
deal with this. It holds information about partitions, can't say much
more about this.
</p>
<div class="org-src-container">
<pre class="src src-sh">genfstab -p /mnt &gt;&gt; /mnt/etc/fstab
</pre>
</div></li>
</ul>
</div>
</div>
<div id="outline-container-org78f9209" class="outline-3">
<h3 id="org78f9209"><span class="section-number-3">8.3</span> log into arch and installing stuff!</h3>
<div class="outline-text-3" id="text-8-3">
<pre class="example">
archroot /mnt
</pre>

<p>
we are now in the arch install and no longer "in" the live usb, fyi. let's
get to work then:
</p>
<ol class="org-ol">
<li>installing important packages
<ul class="org-ul">
<li>we have access to things, like wifi, that are not yet actually
configured yet on the operating system, thus we should take advantage
of this by installing some packages.
<ul class="org-ul">
<li>some of these are subjective, others are ones I have taken from people
who know more about arch than I do</li>
</ul></li>
</ul></li>
<li><p>
for a fact will want to install all the packages in relation to wifi
if you do not have an adapter like me.
</p>
<div class="org-src-container">
<pre class="src src-sh">pacman -S wpa_supplicant networkmanager network-manager-applet dialogue 
</pre>
</div></li>
<li>packages for intel microcode drivers, <b>important</b>
<ul class="org-ul">
<li>microcode is key to stability and patching issues with intel
processors that is released as proprietary code. The linux kernal
can do this directly for us.</li>
<li>need to modify <code>/etc/pacman.conf</code></li>
<li><p>
it will have two lines commented out regarding ~multilib, uncomment
them as so:
</p>
<div class="org-src-container">
<pre class="src src-conf">[<span style="color: #bd93f9;">multilib</span>]
<span style="color: #f8f8f2;">Include</span> = /etc/pacman.d/mirrorlist
</pre>
</div></li>
<li><p>
now install intel microcode:
</p>
<pre class="example">
pacman -Sy intel-ucode
</pre></li>
</ul></li>
<li><p>
other packages others recommend:
</p>
<div class="org-src-container">
<pre class="src src-sh">pacman -S linux-headers linux-lts linux-lts-headers
</pre>
</div>
<ul class="org-ul">
<li>we are essentially installing another copy of the linux kernal for
purposes of stability: if something goes wrong with an update of the
kernal, you will have a backup kernal to get into.</li>
<li>additionally, we are installing the headers for both the current
kernal and the lts kernal: these are useful for other packages that
need to link/bind against them for development purposes, etc.</li>
</ul></li>
<li><p>
we install another useful operating system:
</p>
<div class="org-src-container">
<pre class="src src-sh">pacman -S emacs
</pre>
</div>
<ul class="org-ul">
<li>&#x2026;. or vim if that's your choice&#x2026;. definitely more efficient
memory wise</li>
<li>c.f. i will <i>die</i> before i give up my elisp</li>
<li>you should probably also install tools like <code>git</code></li>
</ul></li>
</ol>
</div>
</div>
<div id="outline-container-org5db9afc" class="outline-3">
<h3 id="org5db9afc"><span class="section-number-3">8.4</span> modify <code>/etc/mkinitcpio.conf</code> to enable encryption</h3>
<div class="outline-text-3" id="text-8-4">
<ol class="org-ol">
<li>there is a variable in here named <code>HOOKS</code>, which the file makes clear
is important to the boot order of the operating system.
<ul class="org-ul">
<li><p>
make yours look like this:
</p>
<div class="org-src-container">
<pre class="src src-conf"><span style="color: #f8f8f2;">HOOKS</span>=(base udev autodetect keyboard keymap modconf block encrypt lvm2 filesystems fsck)
</pre>
</div>
<ul class="org-ul">
<li>you will notice that we <b>moved</b> <code>keyboard</code> to after <code>autodetect</code></li>
<li><b>added</b> <code>keymap</code> to after <code>keyboard</code></li>
<li><b>added</b> <code>encrypt</code> and <code>lvm2</code> after <code>block</code> and before <code>filesystems</code></li>
<li><b>do not fuck this up</b></li>
</ul></li>
</ul></li>
<li><p>
regenerate our <code>initramfs</code>:
</p>
<div class="org-src-container">
<pre class="src src-sh">mkinitcpio -p linux
</pre>
</div>
<ul class="org-ul">
<li>we regenerate the image of the operating system here</li>
<li>it now takes into account the new boot items and order we have
specified in the <code>HOOKS</code> variable</li>
</ul></li>
<li><p>
<b>if you installed</b> the <code>linux-lts</code> kernal, you have to <b>do it again</b> for that
as well
</p>
<div class="org-src-container">
<pre class="src src-sh">mkinitcpio -p linux-lts
</pre>
</div>
<ul class="org-ul">
<li><span class="underline">we are getting there, lads, hold on. for the promise land is close.</span></li>
</ul></li>
</ol>
</div>
</div>
<div id="outline-container-orgbe7ca43" class="outline-3">
<h3 id="orgbe7ca43"><span class="section-number-3">8.5</span> setting up the bootloader itself</h3>
<div class="outline-text-3" id="text-8-5">
<p>
I am using bootctl, not grub. Your call to make ultimately.
</p>

<ol class="org-ol">
<li><p>
create our loader with bootctl
</p>
<pre class="example">
bootctl --path=/boot/ install
</pre></li>
<li>create arch loader
<ul class="org-ul">
<li><p>
modify the file <code>/boot/loader.conf</code> to reflect the following:
</p>
<div class="org-src-container">
<pre class="src src-conf">default arch
timeout 3
editor 0 
</pre>
</div>
<ul class="org-ul">
<li><code>default</code> is the default entry to select when booting</li>
<li><code>timeout</code> is the time before the entry is loaded at the boot menu</li>
<li><code>editor</code> is whether to enable the the kernal parameters
editor. This is import to disable for security purpose and is
<b>enabled by default, so make sure to disable as above</b></li>
</ul></li>
</ul></li>
<li>create arch.conf
<ol class="org-ol">
<li>you are going to need a variable value provided by the command
<code>blkid</code>
<ul class="org-ul">
<li>you will either need to write it down by hand to copy with nano
or use <code>emacs</code> or <code>vim</code> to evaluate it in buffer to copy
<ul class="org-ul">
<li>emacs has <code>eshell</code>, which you can use like the normal shell but
copy and paste with</li>
<li>vim has the command <code>:r !blkid</code> which will read in the file
directly</li>
</ul></li>
<li>this variable is the <code>UUID</code> for <code>/dev/nvme0n1p2</code> as given from <code>blkid</code>
<ul class="org-ul">
<li><code>/dev/nvme0n1p2</code> is the second physical partition we made at the
very beginning. If yours is <code>/dev/sda2</code> or similar, use that
instead.</li>
<li>you will know it is the correct entry if the line also includes
<code>TYPE="crypto_LUKS" PARTLABEL="Linux LVM"</code></li>
</ul></li>
<li><p>
example:
</p>
<div class="org-src-container">
<pre class="src src-conf"><span style="color: #f8f8f2;">/dev/nvme0n1p2: UUID</span>=<span style="color: #f1fa8c;">"really-long-string-of-alphanumericals"</span> TYPE=<span style="color: #f1fa8c;">"crypto_LUKS"</span> PARTLABEL=<span style="color: #f1fa8c;">"Linux LVM"</span> PARTUUID=<span style="color: #f1fa8c;">"another-long-string-of-alphanumericals"</span>
</pre>
</div>
<ul class="org-ul">
<li>note: we want the value of <code>UUID</code>, <b>NOT</b> <code>PARTUUID</code> or
anything else.</li>
</ul></li>
</ul></li>
<li><p>
with this value copied, create the file
<code>/boot/loader/entries/arch.conf</code>:
</p>
<div class="org-src-container">
<pre class="src src-conf">title Arch Linux
linux /vmlinuz-linux <span style="color: #6272a4;"># </span><span style="color: #6272a4;">not a typo</span>
initrd /intel-ucode.img <span style="color: #6272a4;"># </span><span style="color: #6272a4;">this must come before the entry immediately below</span>
initrd /initramfs-linux.img <span style="color: #6272a4;"># </span><span style="color: #6272a4;">what we made with mkinitcpio -p linux</span>
<span style="color: #f8f8f2;">options cryptdevice</span>=UUID=long-alphanumerica-string-WITHOUT-QUOTES:cryptlvm root=/dev/mapper/main_group-root quiet rw
</pre>
</div>
<ul class="org-ul">
<li>as i try to hint, make sure to remove the quotes around the UUID
value as copied and pasted</li>
<li>note that we add a <code>:cryptlvm</code> to the end of that value</li>
<li>after a single space, we added the location of our root
partition within the luks container,
<code>root=/dev/mapper/main_group-root/</code> in my case</li>
<li>finally, we add the options <code>quiet rw</code></li>
</ul></li>
</ol></li>
</ol>
</div>
</div>
<div id="outline-container-org8796651" class="outline-3">
<h3 id="org8796651"><span class="section-number-3">8.6</span> reboot and start arch</h3>
<div class="outline-text-3" id="text-8-6">
<ul class="org-ul">
<li>From here, we can <b>officially reboot into our install and it should work</b>
<ul class="org-ul">
<li>🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉</li>
<li>🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉</li>
</ul></li>
<li>execute <code>shutdown now</code>
<ul class="org-ul">
<li>remove the usb once the laptop turns off</li>
<li>you should eventually see the boot screen which will automatically
boot into arch after 2 seconds or so</li>
</ul></li>
<li>enter your password for the encrypted partition when asked, then login
as <code>root</code> and press enter for the password, seeing as we have yet to
make one.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org438a313" class="outline-2">
<h2 id="org438a313"><span class="section-number-2">9</span> drivers, wifi, sudo user</h2>
<div class="outline-text-2" id="text-9">
<p>
&#x2026;. we aren't done yet :~) 🎉🎉🎉
</p>
</div>
<div id="outline-container-orgd63e5f4" class="outline-3">
<h3 id="orgd63e5f4"><span class="section-number-3">9.1</span> utilities</h3>
<div class="outline-text-3" id="text-9-1">
<ol class="org-ol">
<li>wifi
<ul class="org-ul">
<li>i hope you installed those wifi packages i told you to install and or
you have a lan connection</li>
<li>refollow the steps we did above for wifi to regain our connection</li>
</ul></li>
<li>reconfigure our mirror list
<ul class="org-ul">
<li>again, do as we did before with <code>/etc/pacman.d/mirrorlist</code></li>
</ul></li>
<li>configure locale.gen and time
<ol class="org-ol">
<li>enter <code>/etc/locale.gen</code>
<ul class="org-ul">
<li>we need to tell arch what our locale is by going to the line and
uncommenting our respective locale
<ul class="org-ul">
<li>usa peeps will use the line <code>en_US.UTF-8 UTF8</code></li>
</ul></li>
</ul></li>
<li>run <code>locale-gen</code></li>
<li>run <code>localectl set-locale LANG="en_US.UTF-8"</code>
<ul class="org-ul">
<li>this is separate from step 2.</li>
<li>some applications need it because they won't respect the changes
brought by step #2</li>
</ul></li>
<li>sync our clock with <code>hwclock --systohc --utc</code></li>
</ol></li>
<li>change password for root with <code>passwd</code>
<ul class="org-ul">
<li>self explanatory, but know this is the password exclusively for
<code>root</code>, not for your own user you'll make later who will have sudo
user privileges.</li>
</ul></li>
<li>as of now, you will have to manually connect to wifi access points.
<ul class="org-ul">
<li>tools like <code>wifi-menu</code> help you find access points</li>
<li>it will also help you make a config for it. even if the initial
connection attempt fails, preserve the config (it'll ask you) and go
in to edit it. <code>wifi-menu</code> will then be able to use the corrected
config the next time you try.</li>
</ul></li>
</ol>
</div>
</div>
<div id="outline-container-orgd50cf54" class="outline-3">
<h3 id="orgd50cf54"><span class="section-number-3">9.2</span> touchpad, xorg, and graphics drivers</h3>
<div class="outline-text-3" id="text-9-2">
<p>
I am choosing to not use wayland because while it is the future of linux
desktop management, it is still not 100% ready for userland.
</p>

<ol class="org-ol">
<li><p>
touchpad install
</p>
<div class="org-src-container">
<pre class="src src-sh">pacman -S xf86-input-libinput
</pre>
</div></li>
<li><p>
xorg
</p>
<div class="org-src-container">
<pre class="src src-sh">pacman -S xorg-server xorg-xinit xorg-apps mesa xterm
</pre>
</div>
<ul class="org-ul">
<li>we need xterm in addition to xorg if we want to have a minimally
functional deskto a la <code>twm</code> windows manager that xorg default
supports</li>
</ul></li>

<li>intel drivers
<ul class="org-ul">
<li><p>
to my knowledge, we only have 32 bit drivers in case you are
wondering why we are instaling 32 bit drivers /shrug 
</p>
<div class="org-src-container">
<pre class="src src-sh">pacman -S xf86-video-intel lib32-intel-dri lib32-mesa lib32-libgl
</pre>
</div></li>
<li>at this point, if you want, you can use a very primitive GUI via
<code>twm</code>, which is the default tiling window manager of xorg. To do
this, simply run <code>startx</code>. If it looks weird and ugly, it worked.
<ul class="org-ul">
<li>personally, i'm going to stay in the default tty shell.</li>
</ul></li>
</ul></li>
</ol>
</div>
</div>
<div id="outline-container-org364fa82" class="outline-3">
<h3 id="org364fa82"><span class="section-number-3">9.3</span> configuring sudo, adding a user, disabling root</h3>
<div class="outline-text-3" id="text-9-3">
<ol class="org-ol">
<li>install <code>sudo</code>
<ul class="org-ul">
<li><p>
i am not joking, arch does not come with <code>sudo</code> by default
</p>
<div class="org-src-container">
<pre class="src src-sh">pacman -S sudo
</pre>
</div></li>
</ul></li>

<li><p>
enable sudo for other users via <code>visudo</code>
</p>
<ul class="org-ul">
<li>it is bad to edit the sudoers file with a normal editor. <code>visudo</code>
makes a temporary file and checks that any edits are
syntactically correct before saving and affecting the changes.</li>
<li>we need to uncomment the following line:</li>
</ul>
<div class="org-src-container">
<pre class="src src-shell"><span style="color: #6272a4;">## </span><span style="color: #6272a4;">Uncomment to allow members of group wheel to execute any command</span>&#57344;&#57345;&#57345;
<span style="color: #6272a4;"># </span><span style="color: #6272a4;">%wheel ALL=(ALL) ALL # &lt;-- this line if its now clear enough, fam</span>
</pre>
</div>
<ul class="org-ul">
<li>make sure to not uncomment the one after this one, they have
somewhat similar contents but are not the same ofc</li>
<li><p>
visudo uses vi by <b>default</b>. If you do not know how to use vi,
simply execute the following to use nano instead:
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #f8f8f2;">EDITOR</span>=nano visudo
</pre>
</div></li>
</ul></li>
<li>creating new user
<ul class="org-ul">
<li><p>
make your actual user account with the following, substituting
your desired name:
</p>
<div class="org-src-container">
<pre class="src src-sh">useradd -m -G wheel -s /bin/bash &lt;NAME&gt;
</pre>
</div></li>
<li><p>
give your new user a password
</p>
<div class="org-src-container">
<pre class="src src-sh">passwd &lt;NAME&gt;
</pre>
</div></li>
<li>reboot (or just exit, but I like being sure) your machine, and
make sure you can login as your new user.
<ul class="org-ul">
<li><b>this is critical before we disable root</b>
<ul class="org-ul">
<li>otherwise risk not being to log back in</li>
</ul></li>
</ul></li>
</ul></li>
<li>disable root login
<ul class="org-ul">
<li>you don't have to do this, but I think it is a good security
practice to have
<ul class="org-ul">
<li>makes it much much harder to get into your machine by making
adversaries guess the username itself in addition to</li>
<li>if you are enabling ssh, i believe this does not effect that,
so make sure to disable root logins via ssh as well.</li>
</ul></li>
<li><p>
as your new user, simple execute:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo passwd -l root
</pre>
</div>
<ul class="org-ul">
<li>exit and retry to login as root, should no longer be able to
<ul class="org-ul">
<li>it'll show "login incorrect" errors even when using the
correct password for root user</li>
</ul></li>
</ul></li>
</ul></li>
</ol>
</div>
</div>
</div>
<div id="outline-container-orgd16fe63" class="outline-2">
<h2 id="orgd16fe63"><span class="section-number-2">10</span> loose ends: desktop stuff, etc</h2>
<div class="outline-text-2" id="text-10">
</div>
<div id="outline-container-org15c5752" class="outline-3">
<h3 id="org15c5752"><span class="section-number-3">10.1</span> desktop environment</h3>
<div class="outline-text-3" id="text-10-1">
<p>
still not done :~)
</p>

<p>
we will go for kde5 plasma for now because it is absolutely gorgeous, is not
bloated, and is easy to get accustomed to. i may possibly add an addendum
for a tiling wm like dwm if I can get it figured out.
</p>

<div class="org-src-container">
<pre class="src src-sh">pacman -S plasma-meta kde-applications <span style="color: #6272a4;"># </span><span style="color: #6272a4;">don't do the last if you don't want kde apps, i do, though.</span>
</pre>
</div>
<ul class="org-ul">
<li>this might take a quick minute given the total DL is about ~3gb iirc</li>
</ul>

<p>
now we need to enable it by creating a <code>.xinitrc</code> file in our home with the
following content:
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ffb86c;">echo</span> <span style="color: #f1fa8c;">"exec startkde"</span> &gt;&gt; .xinitrc
</pre>
</div>

<p>
to use your beautiful new desktop, simply execute <code>startx</code> and KDE should
now load. Nice!
</p>
<ul class="org-ul">
<li><p>
whenever you reboot your laptop, you will need to execute <code>startx</code> to get
your desktop. If you don't want the hassle, then put this in your <code>.profile</code>
once you know your desktop starts as expected with <code>startx</code>:
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff79c6; font-weight: bold;">if</span> [[ <span style="color: #8be9fd;">!</span> $<span style="color: #f8f8f2;">DISPLAY</span> &amp;&amp; $<span style="color: #f8f8f2;">XDG_VTNR</span> -eq 1 ]]; <span style="color: #ff79c6; font-weight: bold;">then</span>&#57344;&#57345;&#57345;
  <span style="color: #ff79c6; font-weight: bold;">exec</span> startx&#57344;&#57345;&#57345;
<span style="color: #ff79c6; font-weight: bold;">fi</span>
</pre>
</div>
<ul class="org-ul">
<li>more stuff on customizing xorg startup: <a href="https://wiki.archlinux.org/index.php/Xinit">https://wiki.archlinux.org/index.php/Xinit</a></li>
</ul></li>
</ul>
</div>
<div id="outline-container-org87ec7d6" class="outline-4">
<h4 id="org87ec7d6"><span class="section-number-4">10.1.1</span> kde discover</h4>
<div class="outline-text-4" id="text-10-1-1">
<ul class="org-ul">
<li><p>
KDE discover is the DE's app store. It won't work fully by default
because of how arch handles its applications. You need to install the
following for it to work as expected:
</p>
<div class="org-src-container">
<pre class="src src-sh">pacman -S packagekit-qt5
</pre>
</div>
<ul class="org-ul">
<li>you may still get an error about <code>parley.knsrc</code>, from what I can tell
and searching online, this is """harmless""".</li>
</ul></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org16f2368" class="outline-3">
<h3 id="org16f2368"><span class="section-number-3">10.2</span> fonts</h3>
<div class="outline-text-3" id="text-10-2">
<p>
fonts, and how they work, is actually one of the more confusing things i
encountered during this journey
</p>
<ul class="org-ul">
<li>partitioning drives and encrypting them makes much more sense vs font
configurations in retrospect
<ul class="org-ul">
<li>the following should help you get some very nice looking fonts on your
computer along with full emoji support more or less</li>
<li>completely ripped from a reddit post <a href="https://www.reddit.com/r/archlinux/comments/5r5ep8/make_your_arch_fonts_beautiful_easily/">here</a></li>
</ul></li>

<li><p>
install the fonts
</p>

<div class="org-src-container">
<pre class="src src-sh">pacman -S ttf-dejavu ttf-liberation noto-fonts
</pre>
</div></li>

<li><p>
enable font presets
</p>

<div class="org-src-container">
<pre class="src src-sh">sudo ln -s /etc/fonts/conf.avail/70-no-bitmaps.conf /etc/fonts/conf.d&#57344;&#57345;&#57345;
sudo ln -s /etc/fonts/conf.avail/10-sub-pixel-rgb.conf /etc/fonts/conf.d&#57344;&#57345;&#57345;
sudo ln -s /etc/fonts/conf.avail/11-lcdfilter-default.conf /etc/fonts/conf.d
</pre>
</div></li>

<li><p>
create a file, <code>/etc/fonts/local.conf</code> with following:
</p>

<div class="org-src-container">
<pre class="src src-html"><span style="color: #f1fa8c;">&lt;?xml version="1.0"?&gt;</span>
<span style="color: #f1fa8c;">&lt;!DOCTYPE fontconfig SYSTEM "fonts.dtd"&gt;</span>
&lt;<span style="color: #50fa7b; font-weight: bold;">fontconfig</span>&gt;
    &lt;<span style="color: #50fa7b; font-weight: bold;">match</span>&gt;
        &lt;<span style="color: #50fa7b; font-weight: bold;">edit</span> <span style="color: #f8f8f2;">mode</span>=<span style="color: #f1fa8c;">"prepend"</span> <span style="color: #f8f8f2;">name</span>=<span style="color: #f1fa8c;">"family"</span>&gt;&lt;<span style="color: #50fa7b; font-weight: bold;">string</span>&gt;Noto Sans&lt;/<span style="color: #50fa7b; font-weight: bold;">string</span>&gt;&lt;/<span style="color: #50fa7b; font-weight: bold;">edit</span>&gt;
    &lt;/<span style="color: #50fa7b; font-weight: bold;">match</span>&gt;
    &lt;<span style="color: #50fa7b; font-weight: bold;">match</span> <span style="color: #f8f8f2;">target</span>=<span style="color: #f1fa8c;">"pattern"</span>&gt;
        &lt;<span style="color: #50fa7b; font-weight: bold;">test</span> <span style="color: #f8f8f2;">qual</span>=<span style="color: #f1fa8c;">"any"</span> <span style="color: #f8f8f2;">name</span>=<span style="color: #f1fa8c;">"family"</span>&gt;&lt;<span style="color: #50fa7b; font-weight: bold;">string</span>&gt;serif&lt;/<span style="color: #50fa7b; font-weight: bold;">string</span>&gt;&lt;/<span style="color: #50fa7b; font-weight: bold;">test</span>&gt;
        &lt;<span style="color: #50fa7b; font-weight: bold;">edit</span> <span style="color: #f8f8f2;">name</span>=<span style="color: #f1fa8c;">"family"</span> <span style="color: #f8f8f2;">mode</span>=<span style="color: #f1fa8c;">"assign"</span> <span style="color: #f8f8f2;">binding</span>=<span style="color: #f1fa8c;">"same"</span>&gt;&lt;<span style="color: #50fa7b; font-weight: bold;">string</span>&gt;Noto Serif&lt;/<span style="color: #50fa7b; font-weight: bold;">string</span>&gt;&lt;/<span style="color: #50fa7b; font-weight: bold;">edit</span>&gt;
    &lt;/<span style="color: #50fa7b; font-weight: bold;">match</span>&gt;
    &lt;<span style="color: #50fa7b; font-weight: bold;">match</span> <span style="color: #f8f8f2;">target</span>=<span style="color: #f1fa8c;">"pattern"</span>&gt;
        &lt;<span style="color: #50fa7b; font-weight: bold;">test</span> <span style="color: #f8f8f2;">qual</span>=<span style="color: #f1fa8c;">"any"</span> <span style="color: #f8f8f2;">name</span>=<span style="color: #f1fa8c;">"family"</span>&gt;&lt;<span style="color: #50fa7b; font-weight: bold;">string</span>&gt;sans-serif&lt;/<span style="color: #50fa7b; font-weight: bold;">string</span>&gt;&lt;/<span style="color: #50fa7b; font-weight: bold;">test</span>&gt;
        &lt;<span style="color: #50fa7b; font-weight: bold;">edit</span> <span style="color: #f8f8f2;">name</span>=<span style="color: #f1fa8c;">"family"</span> <span style="color: #f8f8f2;">mode</span>=<span style="color: #f1fa8c;">"assign"</span> <span style="color: #f8f8f2;">binding</span>=<span style="color: #f1fa8c;">"same"</span>&gt;&lt;<span style="color: #50fa7b; font-weight: bold;">string</span>&gt;Noto Sans&lt;/<span style="color: #50fa7b; font-weight: bold;">string</span>&gt;&lt;/<span style="color: #50fa7b; font-weight: bold;">edit</span>&gt;
    &lt;/<span style="color: #50fa7b; font-weight: bold;">match</span>&gt;
    &lt;<span style="color: #50fa7b; font-weight: bold;">match</span> <span style="color: #f8f8f2;">target</span>=<span style="color: #f1fa8c;">"pattern"</span>&gt;
        &lt;<span style="color: #50fa7b; font-weight: bold;">test</span> <span style="color: #f8f8f2;">qual</span>=<span style="color: #f1fa8c;">"any"</span> <span style="color: #f8f8f2;">name</span>=<span style="color: #f1fa8c;">"family"</span>&gt;&lt;<span style="color: #50fa7b; font-weight: bold;">string</span>&gt;monospace&lt;/<span style="color: #50fa7b; font-weight: bold;">string</span>&gt;&lt;/<span style="color: #50fa7b; font-weight: bold;">test</span>&gt;
        &lt;<span style="color: #50fa7b; font-weight: bold;">edit</span> <span style="color: #f8f8f2;">name</span>=<span style="color: #f1fa8c;">"family"</span> <span style="color: #f8f8f2;">mode</span>=<span style="color: #f1fa8c;">"assign"</span> <span style="color: #f8f8f2;">binding</span>=<span style="color: #f1fa8c;">"same"</span>&gt;&lt;<span style="color: #50fa7b; font-weight: bold;">string</span>&gt;Noto Mono&lt;/<span style="color: #50fa7b; font-weight: bold;">string</span>&gt;&lt;/<span style="color: #50fa7b; font-weight: bold;">edit</span>&gt;
    &lt;/<span style="color: #50fa7b; font-weight: bold;">match</span>&gt;
&lt;/<span style="color: #50fa7b; font-weight: bold;">fontconfig</span>&gt;
</pre>
</div></li>

<li>then go to Fonts (use KDE's search bar, accessible via the bottom left
button on the desktop panel), and make sure the edits are reflected
there, i.e. that you now have Noto Sans as your font for everything
minus fixed width text, which should be Hack.</li>

<li>you can do more edits to tweak fonts to your liking here.</li>

<li>resetting the computer should make sure the edits take full effect
across all apps, etc.</li>
</ul>
</div>
</div>

<div id="outline-container-orgd6e6405" class="outline-3">
<h3 id="orgd6e6405"><span class="section-number-3">10.3</span> emacs</h3>
<div class="outline-text-3" id="text-10-3">
<ol class="org-ol">
<li><p>
ispell doesn't work by default because the required programs aren't
installed. let's fix that:
</p>
<div class="org-src-container">
<pre class="src src-sh">pacman -S aspell-en <span style="color: #6272a4;"># </span><span style="color: #6272a4;">ispell didn't work for some reason, so we use its successor.</span>
</pre>
</div></li>
<li>emojis don't work by default, install and run <code>emojify-mode</code>
<ul class="org-ul">
<li>forgot that you need to install <code>emojify</code> (which I had) but also
manually run it to actually display them (or enable them globally).</li>
</ul></li>
</ol>
</div>
</div>
<div id="outline-container-org19b4a30" class="outline-3">
<h3 id="org19b4a30"><span class="section-number-3">10.4</span> gpg and ssh</h3>
<div class="outline-text-3" id="text-10-4">
<ol class="org-ol">
<li>ssh
<ul class="org-ul">
<li>don't yell at me i know that it's probably not the best thing that I do
this, but in my personal defense it is only for personal projects and my
own servers</li>
<li>say you have an ssh key you would like to use on your new install:
<ol class="org-ol">
<li>first, install <code>openssh</code></li>
<li><p>
execute the following:
</p>
<div class="org-src-container">
<pre class="src src-sh">mkdir ~/.ssh&#57344;&#57345;&#57345;
cp &lt;private key&gt; ~/.ssh/&lt;private key&gt;&#57344;&#57345;&#57345;
cp &lt;public key&gt; ~/.ssh/&lt;public key&gt;.pub&#57344;&#57345;&#57345;
chmod 700 ~/.ssh&#57344;&#57345;&#57345;
chmod 600 ~/.ssh/&lt;private key&gt;&#57344;&#57345;&#57345;
chmod 600 ~/.ssh/&lt;public key&gt;.pub
</pre>
</div></li>
</ol></li>
</ul></li>
<li>gpg
<ol class="org-ol">
<li>install gpg
<ul class="org-ul">
<li>should already be installed but yeah</li>
</ul></li>
<li><p>
import the key:
</p>
<div class="org-src-container">
<pre class="src src-sh">gpg --import &lt;gpg key&gt;
</pre>
</div></li>
</ol></li>
</ol>
</div>
</div>
<div id="outline-container-org807a2b2" class="outline-3">
<h3 id="org807a2b2"><span class="section-number-3">10.5</span> AUR and aurman</h3>
<div class="outline-text-3" id="text-10-5">
<ul class="org-ul">
<li>AUR is the Arch User Repository, and it holds a bunch of additional
packages that pacman does not have (or customized in different ways, etc).</li>
<li><code>aurman</code> is a AUR Helper, a tool that helps to install packages hosted up
on AUR
<ul class="org-ul">
<li>it is really good to look into how AUR works and how to do AUR installs
on your own for the sake of being able to help yourself when something
breaks, etc</li>
</ul></li>
<li><p>
to install <code>aurman</code>:
</p>
<ul class="org-ul">
<li><p>
first, we need to install the PGP key of the author:
</p>
<div class="org-src-container">
<pre class="src src-sh">curl -sSL https://github.com/polygamma.gpg | gpg --import -
</pre>
</div>
<ul class="org-ul">
<li>this simply downloads the author's key and imports it directly into
your GPG keychain</li>
</ul></li>
<li>now install <code>aurman</code>
<ul class="org-ul">
<li>it is common advise to make a specific directory where you can go
download and install your AUR packages, so:</li>
</ul></li>
</ul>
<div class="org-src-container">
<pre class="src src-sh">mkdir ~/aur_pkg&#57344;&#57345;&#57345;
<span style="color: #ffb86c;">cd</span> aur_pkg&#57344;&#57345;&#57345;
git clone https://aur.archlinux.org/aurman.git&#57344;&#57345;&#57345;
<span style="color: #ffb86c;">cd</span> aurmen/&#57344;&#57345;&#57345;
makepkg -si <span style="color: #6272a4;"># </span><span style="color: #6272a4;">DO NOT USE SUDO HERE</span>
</pre>
</div></li>
<li><p>
to search for a package on AUR and install, it is just like with pacman:
</p>
<div class="org-src-container">
<pre class="src src-sh">aurman -Ss &lt;query&gt; <span style="color: #6272a4;"># </span><span style="color: #6272a4;">search</span>&#57344;&#57345;&#57345;
aurman -S &lt;pkg&gt; <span style="color: #6272a4;"># </span><span style="color: #6272a4;">install</span>
</pre>
</div>
<ul class="org-ul">
<li>pls go see how it works in its totality: <a href="https://github.com/polygamma/aurman">https://github.com/polygamma/aurman</a>
<ul class="org-ul">
<li>make sure to checkout the install scripts/configs you are using</li>
<li>some malware was recently discovered on AUR</li>
<li>this should not be surprising: bad people are everywhere and the arch
community has been saying for years to make sure to check the code
you use before compiling it on your system</li>
<li>not your mom, tho, help the CCP or NSA run botnets for all i care man</li>
</ul></li>
<li><p>
example, I use <a href="https://spideroak.com/one/">spideroak one</a> as private, encrypted, and more
trustworthy dropbox service, and there is a maintained AUR install for
it:
</p>
<div class="org-src-container">
<pre class="src src-sh">aurman -S spideroak-one <span style="color: #6272a4;"># </span><span style="color: #6272a4;">ta-da</span>
</pre>
</div></li>
</ul></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org2e3cd98" class="outline-2">
<h2 id="org2e3cd98"><span class="section-number-2">11</span> other tweaks and lenovo x1c6 stuff</h2>
<div class="outline-text-2" id="text-11">
<p>
this stuff is mostly related to lenovo thinkpads, but the ssd trimming and
hibernate support are applicable to anyone, and i'm sure figuring out how to
flash a bios could be useful to others.
</p>
</div>
<div id="outline-container-org9a67433" class="outline-3">
<h3 id="org9a67433"><span class="section-number-3">11.1</span> cpu throttling</h3>
<div class="outline-text-3" id="text-11-1">
<ul class="org-ul">
<li>cpu throttling
<ul class="org-ul">
<li>so turns out there is some unfortunate fuckery with Lenovo thinkpad
cpu's right now
<ul class="org-ul">
<li>artificially throttled while underload because of misaligned temp
values</li>
</ul></li>
<li><p>
lets install a script that fixes this
</p>
<div class="org-src-container">
<pre class="src src-sh">aurman -S lenovo-throttling-fix-git&#57344;&#57345;&#57345;
sudo systemctl enable --now lenovo_fix.service
</pre>
</div>
<ul class="org-ul">
<li>usual warnings apply about this not being endorsed by lenovo, etc etc</li>
<li>lenovo i love you, please stop hurting us like this</li>
<li>please look at the script yourself, see the options you have: <a href="https://github.com/erpalma/lenovo-throttling-fix">https://github.com/erpalma/lenovo-throttling-fix</a></li>
</ul></li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-org657aeba" class="outline-3">
<h3 id="org657aeba"><span class="section-number-3">11.2</span> bios update</h3>
<div class="outline-text-3" id="text-11-2">
<p>
Lenovo has released an updated bio since (i'm guessing) most x1c6 units
shipped, at least my model for sure.
</p>
<ul class="org-ul">
<li>has several improvements that are honestly worth risking a manual bios
update</li>
<li>recall that disclaimer I had at the beginning? this action, more than
anything, requires it
<ul class="org-ul">
<li><b>you are responsible</b> for the result of updating your bios. <b>i am not</b>.</li>
</ul></li>
<li>to update your bios:
<ol class="org-ol">
<li>first go get the update, <a href="https://download.lenovo.com/pccbbs/mobiles/n23ur08w.iso">here</a>.</li>
<li><p>
install the following utility made just for this:
</p>
<div class="org-src-container">
<pre class="src src-sh">aurman -S geteltorito
</pre>
</div></li>
<li><p>
we now will extract the .img from the .iso that Lenovo provided us:
</p>
<div class="org-src-container">
<pre class="src src-sh">geteltorito.pl -o &lt;image&gt;.img &lt;image&gt;.iso
</pre>
</div>
<ul class="org-ul">
<li>where the <code>.img</code> is our <b>output</b> from extracting. Do not mix this up later.
<ul class="org-ul">
<li>i say this because when i was doing this myself at like 1am, i sure
as hell did for a while and wasted 30 mins trying to figure out why
my stupid update wouldn't initiate upon boot</li>
</ul></li>
</ul></li>
<li>now we will make a live usb with the <code>.img</code>
<ul class="org-ul">
<li>this is just like what we did when we made the arch live usb
<ul class="org-ul">
<li>same disclaimers apply: do not mix up your source with your
destination, and double check the name of your drive with <code>lsblk</code></li>
<li>i will assume the device is named <code>sdb</code> for the purpose of this
tutorial</li>
<li>make sure the drive is not mounted as well</li>
</ul></li>
<li><p>
with a spare usb you are okay with completely wiping clean, do the
following:
</p>
<div class="org-src-container">
<pre class="src src-sh">dd <span style="color: #f8f8f2;">if</span>=/path/to/bios.img <span style="color: #f8f8f2;">of</span>=/dev/sdb <span style="color: #f8f8f2;">bs</span>=512K <span style="color: #f8f8f2;">status</span>=progress
</pre>
</div></li>
</ul></li>
<li>now, with our new live-usb in hand, reboot the laptop and boot into the
usb
<ul class="org-ul">
<li>you may first need to go back into bios and move the usb to the top
of the boot order config like we needed to when installing arch</li>
</ul></li>
<li>once booted into the usb, <b>choose option #2</b>.
<ul class="org-ul">
<li>agree to all the disclaimers, make sure your <b>laptop is plugged
in</b>, and wait for the update to work itself out.</li>
<li>if you would like a video of what this process visually looks like, <a href="https://www.youtube.com/watch?v=mEcASjftccE">here ya go</a></li>
</ul></li>
</ol></li>
</ul>
</div>
</div>
<div id="outline-container-orge10fa2b" class="outline-3">
<h3 id="orge10fa2b"><span class="section-number-3">11.3</span> trimming SSD</h3>
<div class="outline-text-3" id="text-11-3">
<ul class="org-ul">
<li>not lenovo exclusive but <i>shrug</i>
<ul class="org-ul">
<li>"trimming" your ssd regularly improves its performance by allowing it
to better know where it has memory free to use</li>
</ul></li>
<li>make sure you can do it with command <code>lsblk --discard</code>
<ul class="org-ul">
<li>non-zero values in the first and second column for your SSD means yes</li>
</ul></li>
<li><p>
if so, now install <code>utils-linux</code> and enable the service for periodic
trimming
</p>
<div class="org-src-container">
<pre class="src src-sh">pacman -S utils-linux&#57344;&#57345;&#57345;
systemctl enable fstrim.timer
</pre>
</div>
<ul class="org-ul">
<li>you can tweak the time interval this occurs, that's on you</li>
</ul></li>
<li>for those possibly wondering: we don't need to enable trimming in lvm's
conf nor for dm-crypt with this method, which is both nice and more
secure. That said, you could potentially get better performance doing
these alterations as well, but I won't.</li>
</ul>
</div>
</div>
<div id="outline-container-org6f5bc6e" class="outline-3">
<h3 id="org6f5bc6e"><span class="section-number-3">11.4</span> hibernate support</h3>
<div class="outline-text-3" id="text-11-4">
<ol class="org-ol">
<li>we need to change our HOOKS in <code>/etc/mkinitcpio.conf</code> once more:
<ul class="org-ul">
<li><p>
we are adding the <code>resume</code> argument <b>between</b> lvm2 and filesystems
</p>
<div class="org-src-container">
<pre class="src src-conf"><span style="color: #f8f8f2;">HOOKS</span>=(base udev autodetect keyboard keymap modconf block encrypt lvm2 resume filesystems fsck)
</pre>
</div></li>
</ul></li>
<li>we need to regenerate our <code>initramfs</code> once again:
<ul class="org-ul">
<li><p>
if you installed <code>linux-lts</code>, you need to do this for that as well.
</p>
<div class="org-src-container">
<pre class="src src-sh">mkinitcpio -p linux&#57344;&#57345;&#57345;
<span style="color: #6272a4;"># </span><span style="color: #6272a4;">mkinitcpio -p linux-lts</span>
</pre>
</div></li>
</ul></li>
<li>we now need to edit our <code>arch.conf</code> loader so it knows we have access to
hibernation
<ul class="org-ul">
<li>tweaking the kernel parameters in <code>options</code> by adding
<code>resume=/dev/mapper/main_group-swap</code>, or whatever the path is for your
encrypted swap partition in <code>/dev/mapper/</code> is.</li>
<li><p>
example, near the end of the last line:
</p>
<div class="org-src-container">
<pre class="src src-sh">title Arch Linux&#57344;&#57345;&#57345;
linux /vmlinuz-linux&#57344;&#57345;&#57345;
initrd /intel-ucode.img&#57344;&#57345;&#57345;
initrd /initramfs-linux.img&#57344;&#57345;&#57345;
options <span style="color: #f8f8f2;">cryptdevice</span>=<span style="color: #f8f8f2;">UUID</span>=&lt;LONG-ALPHANUM-STRING&gt;:cryptlvm <span style="color: #f8f8f2;">root</span>=/dev/mapper/main_group-root <span style="color: #f8f8f2;">resume</span>=/dev/mapper/main_group-swap quiet rw
</pre>
</div></li>
</ul></li>
</ol>
</div>
</div>
<div id="outline-container-org038019c" class="outline-3">
<h3 id="org038019c"><span class="section-number-3">11.5</span> patching for S3 support</h3>
<div class="outline-text-3" id="text-11-5">
<ol class="org-ol">
<li>s3 vs s0i3 sleep state
<ul class="org-ul">
<li>this is a lot trickier and i won't be walking you through this</li>
<li>tl;dr, MCSFT is pushing a new sleep state standard, s0i3, that makes laptop behave more
akin to phones
<ul class="org-ul">
<li>pros: they can do stuff like connect to wifi, update, and refresh
user data while asleep</li>
<li>cons: massively more energy use</li>
</ul></li>
<li>lenovo decided to support this: okay, fine
<ul class="org-ul">
<li>&#x2026; but also decided to completely remove support for previous
format, S3
<ul class="org-ul">
<li>wait, <b>why, lenovo, why??????</b></li>
</ul></li>
</ul></li>
<li>Making matters worse: neither are now properly supported by linux
because of lenovo's implementation, you need to apply a patch fix
either way
<ul class="org-ul">
<li>it involves patching the kernal or editing boot configs</li>
<li>didn't mention them earlier because this is an idiot's guide and i
didn't want to overwhelm you
<ul class="org-ul">
<li>i was also overwhelmed, i was the idiot</li>
</ul></li>
</ul></li>
<li>reference the wiki, make your decision:
<ul class="org-ul">
<li>if you want to return to S3, follow this guide: <a href="https://delta-xi.net/#056">https://delta-xi.net/#056</a></li>
<li>it is very good and really does guide you through all the steps, do
not be intimidated</li>
</ul></li>
</ul></li>
<li>if you follow the s3 guide (as I did), some advice:
<ol class="org-ol">
<li><b>first and foremost, update your bios as described above</b>
<ol class="org-ol">
<li>good chance your s3 won't work nearly as good without it (if at
all, going by forum discussions)</li>
</ol></li>
<li>when running the patch, Hunk 7 failed for me.
<ol class="org-ol">
<li><p>
solution: there is a function call that will look like this in
your .dsl:
</p>
<div class="org-src-container">
<pre class="src src-asm"><span style="color: #50fa7b; font-weight: bold;">OperationRegion</span> (GNVS, SystemMemory, 0x4FF4E000,0x0771)
</pre>
</div>
<ul class="org-ul">
<li>the last two values are different from the <code>.patch</code> the author
provides. Edit the values <b>in the patch</b> to be the <b>same</b> as
those in your <b>.dsl</b></li>
<li>after this, <b>regenerate</b> the .dsl as the author guides you and
reapply the patch as instructed, hunk 7 should now pass.</li>
</ul></li>
<li>the author uses <code>GRUB</code>, if you followed my guide, you don't use
<code>GRUB</code> like me.
<ol class="org-ol">
<li>Follow the guide as instructed up to, and including, to where
we <code>cp</code> the <code>acpi_override</code> to <code>/boot/</code></li>
<li>Now we need to edit our <code>arch.conf</code> entry that we made earlier
in <code>/boot/loader/entries/</code>
<ul class="org-ul">
<li>we are making two additions, adding a <code>initrd /acpi_override</code>
entry and then adding another kernal param argument to
options, <code>mem_sleep_default=deep</code></li>
<li><p>
this is what my <code>arch.conf</code> looks like:
</p>
<div class="org-src-container">
<pre class="src src-conf">title Arch Linux
linux /vmlinuz-linux
initrd /intel-ucode.img
initrd /acpi_override
initrd /initramfs-linux.img
<span style="color: #f8f8f2;">options cryptdevice</span>=UUID=&lt;LONG-ALPHANUM-STRING&gt;:cryptlvm root=/dev/mapper/main_group-root mem_sleep_default=deep quiet rw
</pre>
</div>
<ul class="org-ul">
<li>notice the fourth line and the end of the last line, you'll
see my edits as compared to when we first made this file</li>
<li>I've excluded the edit for enabling hibernation from this
example, fyi</li>
</ul></li>
</ul></li>
</ol></li>
</ol></li>
</ol></li>
<li>update: there is a script to do this if you feel comfortable using it!
<ul class="org-ul">
<li>look <a href="https://github.com/fiji-flo/x1carbon2018s3">here</a></li>
</ul></li>
</ol>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Created: 2018-07-17 Tue 16:22</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
